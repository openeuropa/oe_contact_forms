<?php

/**
 * @file
 * OpenEuropa Contact Forms module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\contact\Entity\ContactForm;
use Drupal\contact\Entity\Message;
use Drupal\contact\ContactFormInterface;

/**
 * Implements hook_form_FORM_ID_alter() for contact_form_form().
 */
function oe_contact_forms_form_contact_form_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\contact\ContactFormInterface $contact_form */
  $form_object = $form_state->getFormObject();

  if (!in_array($form_object->getOperation(), ['edit', 'add'], TRUE)) {
    // Only alter the edit and add forms.
    return;
  }

  $contact_form = $form_object->getEntity();

  $form['is_corporate_form'] = [
    '#type' => 'checkbox',
    '#title' => t('Is corporate form'),
    '#description' => t("Check this box if you'd like to make this a corporate form."),
    '#default_value' => $contact_form->getThirdPartySetting('oe_contact_forms', 'is_corporate_form', FALSE),
  ];

  $form['#entity_builders'][] = '_oe_contact_forms_contact_form_builder';
}

/**
 * Entity builder for the contact form edit form with third party options.
 *
 * @param string $entity_type
 *   The contact form entity.
 * @param \Drupal\contact\ContactFormInterface $contact_form
 *   The contact form entity.
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _oe_contact_forms_contact_form_builder($entity_type, ContactFormInterface $contact_form, array &$form, FormStateInterface $form_state): void {
  // Mock some topic values.
  $topic_names = ['Agriculture', 'Business and industry', 'Competition'];

  $contact_form->setThirdPartySetting('oe_contact_forms', 'topic_name', $topic_names);
  $contact_form->setThirdPartySetting('oe_contact_forms', 'topic_email', $topic_emails);
  $contact_form->setThirdPartySetting('oe_contact_forms', 'is_corporate_form', $form_state->getValue('is_corporate_form'));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oe_contact_forms_form_contact_message_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\ContentEntityForm $form_object */
  $form_object = $form_state->getFormObject();
  /* @var \Drupal\contact\MessageInterface $contact_message */
  $contact_message = $form_object->getEntity();
  /* @var \Drupal\contact\Entity\ContactForm $contact_form */
  $contact_form = ContactForm::load($contact_message->bundle());

  if (!$contact_form->getThirdPartySetting('oe_contact_forms', 'is_corporate_form', FALSE)) {
    $form['oe_country_residence']['#access'] = FALSE;
    $form['oe_telephone']['#access'] = FALSE;
    $form['oe_topic']['#access'] = FALSE;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function oe_contact_forms_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'contact_message') {
    $fields = [];

    $handler_settings = [
      'target_bundles' => NULL,
      'auto_create' => FALSE,
      'concept_schemes' => [
        'http://publications.europa.eu/resource/authority/country',
      ],
    ];

    $fields['oe_country_residence'] = BaseFieldDefinition::create('skos_concept_entity_reference')
      ->setLabel(t('Country of residence'))
      ->setSetting('target_type', 'skos_concept')
      ->setSetting('handler', 'default:skos_concept')
      ->setSetting('handler_settings', $handler_settings)
      ->setDisplayOptions('form', [
        'weight' => -1,
      ])
      ->setDisplayOptions('view', [
        'weight' => -1,
      ]);

    $fields['oe_telephone'] = BaseFieldDefinition::create('telephone')
      ->setLabel(t('Phone'))
      ->setSettings([
        'default_value' => '',
        'max_length' => 255,
      ])
      ->setDisplayOptions('form', [
        'weight' => -1,
      ])
      ->setDisplayOptions('view', [
        'weight' => -1,
      ]);

    $fields['oe_topic'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Topic'))
      ->setDisplayOptions('form', [
        'type' => 'options_select',
        'weight' => -1,
      ])
      ->setDisplayOptions('view', [
        'weight' => -1,
      ])
      ->setSetting('allowed_values_function', '_oe_contact_forms_topic_values')
      ->setRequired(TRUE);

    return $fields;
  }
}

/**
 * Set dynamic allowed values for the topic field.
 *
 * @param \Drupal\Core\Field\BaseFieldDefinition $definition
 *   The base field definition.
 * @param \Drupal\contact\Entity\Message|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _oe_contact_forms_topic_values(BaseFieldDefinition $definition, Message $entity = NULL, &$cacheable = TRUE): array {
  /* @var \Drupal\contact\Entity\ContactForm $contact_form */
  $contact_form = $entity->getContactForm();
  $options = $contact_form->getThirdPartySetting('oe_contact_forms', 'topic_name', []);

  return $options;
}
