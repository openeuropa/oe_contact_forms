<?php

/**
 * @file
 * OpenEuropa Contact Forms module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\Element\EntityAutocomplete;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\contact\Entity\ContactForm;
use Drupal\contact\Entity\Message;
use Drupal\contact\ContactFormInterface;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_form_FORM_ID_alter() for contact_form_form().
 */
function oe_contact_forms_form_contact_form_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\contact\ContactFormEditForm $form_object */
  $form_object = $form_state->getFormObject();

  if (!in_array($operation = $form_object->getOperation(), ['edit', 'add'], TRUE)) {
    // Only alter the edit and add forms.
    return;
  }

  /** @var \Drupal\contact\ContactFormInterface $contact_form */
  $contact_form = $form_object->getEntity();
  $is_corporate_form = (boolean) ($form_state->getValue('is_corporate_form') ?? $contact_form->getThirdPartySetting('oe_contact_forms', 'is_corporate_form', FALSE));
  $triggered_element = $form_state->getTriggeringElement();

  if (!empty($triggered_element['#submit'])) {
    $is_corporate_form = TRUE;
  }

  // Adding checkbox with ajax callback that managed addionals fields.
  $form['is_corporate_form'] = [
    '#type' => 'checkbox',
    '#title' => t('Is corporate form'),
    '#description' => t("Check this box if you'd like to make this a corporate form."),
    '#default_value' => $is_corporate_form,
    '#ajax' => [
      'callback' => '_oe_contact_forms_is_corporate_form_ajax_callback',
      'wrapper' => 'corporate-fields-wrapper',
    ],
  ];
  $form['corporate_fields'] = [
    '#type' => 'container',
    '#attributes' => [
      'id' => ['corporate-fields-wrapper'],
    ],
  ];

  if ($is_corporate_form) {
    // Remove disable message as it's not used in corporate contact forms.
    unset($form['contact_storage_disabled_form_message']);

    $form['corporate_fields']['topics_fieldset'] = [
      '#type' => 'fieldset',
      '#title' => t('Topics'),
      '#prefix' => '<div id="topics-fieldset-wrapper">',
      '#suffix' => '</div>',
      '#description' => t("Please select the topics and the associated email addresses the users can choose when submitting the form. For multiple email addresses, please separate them with a comma."),
    ];

    $topics = $contact_form->getThirdPartySetting('oe_contact_forms', 'topics', []);
    $num_topics = $form_state->get('num_topics');
    $n = count($topics);
    $topics_limit_validation_errors = [];

    // No values added yet.
    if ($num_topics === NULL && $n === 0) {
      $num_topics = 1;
    }

    // Any saved values.
    if ($num_topics === NULL && $n > 0) {
      $num_topics = $n;
    }

    $form_state->set('num_topics', $num_topics);

    for ($i = 0; $i < $num_topics; $i++) {
      if (isset($topics[$i])) {
        $topic_name = $topics[$i]['topic_name'];
        $topic_email_address = $topics[$i]['topic_email_address'];
      }
      $topics_limit_validation_errors[] = [
        'corporate_fields',
        'topics_fieldset',
        'group',
        $i,
        'topic_name',
      ];
      $topics_limit_validation_errors[] = [
        'corporate_fields',
        'topics_fieldset',
        'group',
        $i,
        'topic_email_address',
      ];
      $form['corporate_fields']['topics_fieldset']['group'][$i]['topic_name'] = [
        '#type' => 'textfield',
        '#title' => t('Topic name'),
        '#required' => TRUE,
        '#default_value' => $topic_name ?? '',
      ];
      $form['corporate_fields']['topics_fieldset']['group'][$i]['topic_email_address'] = [
        '#type' => 'textfield',
        '#title' => t('Topic email address(es)'),
        '#required' => TRUE,
        '#default_value' => $topic_email_address ?? '',
      ];
    }

    $form['corporate_fields']['topics_fieldset']['actions'] = [
      '#type' => 'actions',
    ];
    $form['corporate_fields']['topics_fieldset']['actions']['add_topic'] = [
      '#type' => 'submit',
      '#value' => t('Add topic'),
      '#submit' => ['_oe_contact_forms_add_one_callback'],
      '#ajax' => [
        'callback' => '_oe_contact_forms_add_more_callback',
        'wrapper' => 'topics-fieldset-wrapper',
      ],
      '#limit_validation_errors' => $topics_limit_validation_errors,
    ];
    $form['corporate_fields']['topics_fieldset']['actions']['remove_topic'] = [
      '#type' => 'submit',
      '#value' => t('Remove topic'),
      '#submit' => ['_oe_contact_forms_remove_callback'],
      '#ajax' => [
        'callback' => '_oe_contact_forms_add_more_callback',
        'wrapper' => 'topics-fieldset-wrapper',
      ],
      '#limit_validation_errors' => [],
    ];
    $form['corporate_fields']['topic_label'] = [
      '#type' => 'textfield',
      '#title' => t('Topic label'),
      '#description' => t("Please specify the label for the Topics field. Leave empty for the default: 'Topic'."),
      '#default_value' => $contact_form->getThirdPartySetting('oe_contact_forms', 'topic_label', ''),
    ];
    $form['corporate_fields']['email_subject'] = [
      '#type' => 'textfield',
      '#title' => t('Email subject'),
      '#required' => TRUE,
      '#description' => t("Please specify the subject of the email."),
      '#default_value' => $contact_form->getThirdPartySetting('oe_contact_forms', 'email_subject', ''),
    ];
    $form['corporate_fields']['header'] = [
      '#type' => 'textarea',
      '#title' => t('Header'),
      '#description' => t("Please specify the text to be displayed above the contact form for users that submit it."),
      '#default_value' => $contact_form->getThirdPartySetting('oe_contact_forms', 'header', ''),
    ];
    $form['corporate_fields']['privacy_policy'] = [
      '#type' => 'entity_autocomplete',
      '#target_type' => 'node',
      '#attributes' => ['data-autocomplete-first-character-blacklist' => '/#?'],
      '#title' => t('Privacy policy link'),
      '#required' => TRUE,
      '#description' => t("Link to form privacy policy/data protection page."),
      '#element_validate' => array(
        array(
          '\Drupal\link\Plugin\Field\FieldWidget\LinkWidget',
          'validateUriElement',
        ),
      ),
      '#maxlength' => 2048,
      '#process_default_value' => FALSE,
      '#default_value' => _oe_contact_forms_get_privacy_default($contact_form->getThirdPartySetting('oe_contact_forms', 'privacy_policy', '')),
    ];
    $form['corporate_fields']['includes_fields_in_auto_reply'] = [
      '#type' => 'checkbox',
      '#title' => t('Includes fields in auto-reply'),
      '#description' => t("Check this box if you would like to include in the auto-reply also the values submitted by the user."),
      '#default_value' => $contact_form->getThirdPartySetting('oe_contact_forms', 'includes_fields_in_auto_reply', FALSE),
    ];
    $form['corporate_fields']['allow_canonical_url'] = [
      '#type' => 'checkbox',
      '#title' => t('Allow canonical URL'),
      '#description' => t("Check this box if you would like this contact form to be exposed at its default canonical URL."),
      '#default_value' => $contact_form->getThirdPartySetting('oe_contact_forms', 'allow_canonical_url', FALSE),
    ];
    $form['corporate_fields']['expose_as_block'] = [
      '#type' => 'checkbox',
      '#title' => t('Expose as block'),
      '#description' => t("Check this box if you would like to expose this contact form as a block."),
      '#default_value' => $contact_form->getThirdPartySetting('oe_contact_forms', 'expose_as_block', TRUE),
    ];
    $form['corporate_fields']['optional_fields'] = [
      '#type' => 'checkboxes',
      '#title' => t('Optional fields'),
      '#options' => [
        'oe_country_residence' => t('Country of residence'),
        'oe_telephone' => t('Phone'),
      ],
      '#description' => t("Please specify which optional fields you'd like to include in the form."),
      '#default_value' => $contact_form->getThirdPartySetting('oe_contact_forms', 'optional_fields', []),
    ];

    // To not flatten the data in $form_state.
    $form['#tree'] = TRUE;
    $form['#validate'][] = '_oe_contact_forms_email_validate';
  }

  $form['#entity_builders'][] = '_oe_contact_forms_contact_form_builder';
}

/**
 * Gets the URI without the 'internal:' or 'entity:' scheme.
 *
 * The following two forms of URIs are transformed:
 * - 'entity:' URIs: to entity autocomplete ("label (entity id)") strings;
 * - 'internal:' URIs: the scheme is stripped.
 *
 * It's sad that LinkWidget::getUriAsDisplayableString() is a protected method,
 * and we can't benefit from its implementation.
 *
 * @param string $uri
 *   The URI to get the displayable string for.
 *
 * @return string
 *
 * @see \Drupal\link\Plugin\Field\FieldWidget\LinkWidget::getUriAsDisplayableString()
 */
function _oe_contact_forms_get_privacy_default(string $uri): string {
  $scheme = parse_url($uri, PHP_URL_SCHEME);
  // By default, the displayable string is the URI.
  $displayable_string = $uri;

  // A different displayable string may be chosen in case of the 'internal:'
  // or 'entity:' built-in schemes.
  if ($scheme === 'internal') {
    $uri_reference = explode(':', $uri, 2)[1];

    // @todo '<front>' is valid input for BC reasons, may be removed by
    //   https://www.drupal.org/node/2421941
    $path = parse_url($uri, PHP_URL_PATH);
    if ($path === '/') {
      $uri_reference = '<front>' . substr($uri_reference, 1);
    }

    $displayable_string = $uri_reference;
  }
  elseif ($scheme === 'entity') {
    [$entity_type, $entity_id] = explode('/', substr($uri, 7), 2);
    // Show the 'entity:' URI as the entity autocomplete would.
    // @todo Support entity types other than 'node'. Will be fixed in
    //    https://www.drupal.org/node/2423093.
    if ($entity_type == 'node' && $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id)) {
      $displayable_string = EntityAutocomplete::getEntityLabels([$entity]);
    }
  }
  elseif ($scheme === 'route') {
    $displayable_string = ltrim($displayable_string, 'route:');
  }

  return $displayable_string;
}

/**
 * Clear block cached definitions.
 */
function _oe_contact_forms_clear_block_cached_definitions(): void {
  \Drupal::service('plugin.manager.block')->clearCachedDefinitions();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function oe_contact_forms_contact_form_presave(EntityInterface $entity) {
  _oe_contact_forms_clear_block_cached_definitions();
  // Invalidate form display cache tags if config is changed,
  // since the EntityFormDisplay is not in storage we compose the tag.;
  Cache::invalidateTags(['config:core.entity_form_display.contact_message.' . $entity->id() . '.corporate_default']);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function oe_contact_forms_contact_form_delete(EntityInterface $entity) {
  _oe_contact_forms_clear_block_cached_definitions();
}

/**
 * Default ajax callback for Topics.
 *
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return array
 *   Topics fieldset.
 */
function _oe_contact_forms_add_more_callback(array &$form, FormStateInterface $form_state): array {
  return $form['corporate_fields']['topics_fieldset'];
}

/**
 * Add element to the form based on ajax.
 *
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _oe_contact_forms_add_one_callback(array &$form, FormStateInterface $form_state): void {
  $num_topics = $form_state->get('num_topics');
  $num_topics++;
  $form_state->set('num_topics', $num_topics);
  $form_state->setRebuild();
}

/**
 * Remove element from the form based on ajax.
 *
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _oe_contact_forms_remove_callback(array &$form, FormStateInterface $form_state): void {
  $num_topics = $form_state->get('num_topics');

  if ($num_topics > 1) {
    $num_topics--;
  }

  $form_state->set('num_topics', $num_topics);
  $form_state->setRebuild();
}

/**
 * Ajax callback: Return markup for 'corporate_fields'.
 *
 * According 'is_corporate_form' value.
 *
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return array
 *   Corporate fields.
 */
function _oe_contact_forms_is_corporate_form_ajax_callback(array &$form, FormStateInterface $form_state): array {
  return $form['corporate_fields'];
}

/**
 * Entity builder for the contact form edit form with third party options.
 *
 * @param string $entity_type
 *   The contact form entity.
 * @param \Drupal\contact\ContactFormInterface $contact_form
 *   The contact form entity.
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _oe_contact_forms_contact_form_builder($entity_type, ContactFormInterface $contact_form, array &$form, FormStateInterface $form_state): void {
  // When ajax is triggered the form is rebuilt with empty recipients,
  // causing invalid arguments in Drupal\contact\ContactFormEditForm::form()L96.
  $recipients = $contact_form->getRecipients();

  if (!is_array($recipients)) {
    $contact_form->setRecipients((array) $recipients);
  }

  $is_corporate_form = (boolean) $form_state->getValue('is_corporate_form');
  $values = $form_state->getValue('corporate_fields');
  $triggered_element = $form_state->getTriggeringElement();

  if (!empty($triggered_element['#submit']) && in_array('_oe_contact_forms_add_one_callback', $triggered_element['#submit'])) {
    $is_corporate_form = FALSE;
  }

  $contact_form->setThirdPartySetting('oe_contact_forms', 'is_corporate_form', $is_corporate_form);

  if ($is_corporate_form && !empty($values)) {
    $contact_form->setThirdPartySetting('oe_contact_forms', 'topic_label', $values['topic_label']);
    $contact_form->setThirdPartySetting('oe_contact_forms', 'email_subject', $values['email_subject']);
    $contact_form->setThirdPartySetting('oe_contact_forms', 'header', $values['header']);
    $contact_form->setThirdPartySetting('oe_contact_forms', 'privacy_policy', $values['privacy_policy']);
    $contact_form->setThirdPartySetting('oe_contact_forms', 'includes_fields_in_auto_reply', $values['includes_fields_in_auto_reply']);
    $contact_form->setThirdPartySetting('oe_contact_forms', 'allow_canonical_url', $values['allow_canonical_url']);
    $contact_form->setThirdPartySetting('oe_contact_forms', 'expose_as_block', $values['expose_as_block']);
    $contact_form->setThirdPartySetting('oe_contact_forms', 'optional_fields', $values['optional_fields']);
    $contact_form->setThirdPartySetting('oe_contact_forms', 'topics', $values['topics_fieldset']['group']);
  }
  else {
    $fields = [
      'topic_label',
      'email_subject',
      'header',
      'privacy_policy',
      'includes_fields_in_auto_reply',
      'allow_canonical_url',
      'expose_as_block',
      'optional_fields',
      'topics',
    ];

    foreach ($fields as $field) {
      $contact_form->unsetThirdPartySetting('oe_contact_forms', $field);
    }
  }
}

/**
 * Validate topics email addresses if set.
 *
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _oe_contact_forms_email_validate(array &$form, FormStateInterface $form_state): void {
  $values = $form_state->getValue('corporate_fields');
  $topics_fieldset = &$values['topics_fieldset'];
  $email_validator = \Drupal::service('email.validator');

  foreach ($topics_fieldset['group'] as $delta => &$topic) {
    if (empty($topic['topic_email_address'])) {
      continue;
    }
    // Validate each email separately.
    $recipients = explode(',', $topic['topic_email_address']);

    foreach ($recipients as $key => &$recipient) {
      $recipient = trim($recipient);

      if (!$email_validator->isValid($recipient)) {
        $form_state->setErrorByName("corporate_fields][topics_fieldset][group][$delta][topic_email_address", t('%recipient is an invalid email address.', ['%recipient' => $recipient]));
      }
    }

    $topic['topic_email_address'] = implode(',', $recipients);
  }

  // Set trimmed values.
  $form_state->setValue('corporate_fields', $values);
}

/**
 * Implements hook_form_FORM_ID_alter() for contact_message_form().
 */
function oe_contact_forms_form_contact_message_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\ContentEntityForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\contact\MessageInterface $contact_message */
  $contact_message = $form_object->getEntity();
  /** @var \Drupal\contact\Entity\ContactForm $contact_form */
  $contact_form = ContactForm::load($contact_message->bundle());

  // We only want corporate fields on corporate forms.
  if (!$contact_form->getThirdPartySetting('oe_contact_forms', 'is_corporate_form', FALSE)) {
    $fields = ['oe_country_residence', 'oe_telephone', 'oe_topic'];

    foreach ($fields as $field) {
      if (!isset($form[$field])) {
        continue;
      }
      $form[$field]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function oe_contact_forms_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'contact_message') {
    $fields = [];

    $fields['oe_country_residence'] = BaseFieldDefinition::create('skos_concept_entity_reference')
      ->setLabel(t('Country of residence'))
      ->setSetting('target_type', 'skos_concept')
      ->setSetting('handler', 'default:skos_concept')
      ->setSetting('handler_settings', [
        'target_bundles' => NULL,
        'auto_create' => FALSE,
        'concept_schemes' => [
          'http://publications.europa.eu/resource/authority/country',
        ],
      ])
      ->setDisplayOptions('form', [
        'type' => 'skos_concept_entity_reference_options_select',
      ])
      ->setDisplayOptions('view', [
        'weight' => 0,
        'settings' => [
          'link' => FALSE,
        ],
      ]);

    $fields['oe_telephone'] = BaseFieldDefinition::create('telephone')
      ->setLabel(t('Phone'))
      ->setSettings([
        'default_value' => '',
        'max_length' => 255,
      ])
      ->setDisplayOptions('form', [
        'type' => 'telephone_default',
      ])
      ->setDisplayOptions('view', [
        'weight' => 0,
      ]);

    $fields['oe_topic'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Topic'))
      ->setDisplayOptions('form', [
        'type' => 'options_select',
      ])
      ->setDisplayOptions('view', [
        'weight' => 0,
      ])
      ->setSetting('allowed_values_function', '_oe_contact_forms_topic_values')
      ->setRequired(TRUE);

    return $fields;
  }
}

/**
 * Set dynamic allowed values for the topic field.
 *
 * @param \Drupal\Core\Field\BaseFieldDefinition $definition
 *   The base field definition.
 * @param \Drupal\contact\Entity\Message|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _oe_contact_forms_topic_values(BaseFieldDefinition $definition, Message $entity = NULL, &$cacheable = TRUE): array {
  /** @var \Drupal\contact\ContactFormInterface $contact_form */
  $contact_form = $entity->getContactForm();
  $topics = $contact_form->getThirdPartySetting('oe_contact_forms', 'topics', []);
  $options = [];

  foreach ($topics as $topic) {
    $topic_name = $topic['topic_name'];
    $options[$topic_name] = $topic_name;
  }

  return $options;
}

/**
 * Implements hook_entity_type_alter().
 */
function oe_contact_forms_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  // Set the form handler class for messages to corporate implementation.
  $entity_types['contact_message']->setFormClass('corporate_default', '\Drupal\oe_contact_forms\Form\ContactMessageForm');
}

/**
 * Implements hook_form_FORM_ID_alter() for contact_form_disable_form().
 */
function oe_contact_forms_form_contact_form_disable_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\contact\ContactFormInterface $contact_form */
  $contact_form = $form_state->getFormObject()->getEntity();

  if (!$contact_form->getThirdPartySetting('oe_contact_forms', 'is_corporate_form', FALSE)) {
    // Only alter disable form if its a corporate contact forms.
    return;
  }

  // Remove disable message as it's not used in corporate contact forms.
  unset($form['contact_storage_disabled_form_message']);
}

/**
 * Implements hook_entity_form_display_alter().
 */
function oe_contact_forms_entity_form_display_alter(EntityFormDisplayInterface $form_display, array $context) {
  // Order the fields.
  if ($context['entity_type'] == 'contact_message' && $context['form_mode'] == 'corporate_default') {
    $form_display
      ->setComponent('header', [
        'weight' => -1,
      ])
      ->setComponent('name', [
        'weight' => 0,
      ])
      ->setComponent('mail', [
        'weight' => 1,
      ])
      ->setComponent('subject', [
        'weight' => 2,
      ])
      ->setComponent('message', [
        'weight' => 3,
      ])
      ->setComponent('oe_topic', [
        'weight' => 4,
      ])
      ->setComponent('oe_country_residence', [
        'weight' => 5,
        'type' => 'skos_concept_entity_reference_options_select',
      ])
      ->setComponent('oe_telephone', [
        'weight' => 6,
      ])
      ->setComponent('copy', [
        'weight' => 7,
      ])
      ->setComponent('privacy_policy', [
        'weight' => 8,
      ]);
  }
}

/**
 * Implements hook_mail_alter().
 */
function oe_contact_forms_mail_alter(&$message) {
  // Check if its a corporate contact form.
  $is_corporate_form = FALSE;
  $mail_ids = ['contact_page_mail', 'contact_page_copy', 'contact_page_autoreply'];

  if (isset($message['params']['contact_form'])) {
    /** @var \Drupal\contact\ContactFormInterface $contact_form */
    $contact_form = $message['params']['contact_form'];
    $is_corporate_form = (boolean) $contact_form->getThirdPartySetting('oe_contact_forms', 'is_corporate_form', FALSE);
  }

  if (!$is_corporate_form || !in_array($message['id'], $mail_ids)) {
    return;
  }

  // Change subject for corporate mail, copy and reply.
  $message['subject'] = $contact_form->getThirdPartySetting('oe_contact_forms', 'email_subject');
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function oe_contact_forms_contact_message_create_access(AccountInterface $account, array $context, $entity_bundle) {
  if (!$entity_bundle) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\contact\Entity\ContactForm $contact_form */
  $contact_form = ContactForm::load($entity_bundle);

  if (!$contact_form) {
    return AccessResult::neutral();
  }

  // Leave default contact forms untouched.
  if (!$contact_form->getThirdPartySetting('oe_contact_forms', 'is_corporate_form', FALSE)) {
    return AccessResult::neutral()->addCacheableDependency($contact_form);
  }

  if ($account->hasPermission('access corporate contact form')) {
    return AccessResult::allowed()->cachePerPermissions()->addCacheTags($contact_form->getCacheTags());
  }

  return AccessResult::forbidden()->cachePerPermissions();
}
